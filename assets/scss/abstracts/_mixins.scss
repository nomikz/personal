@mixin clearfix {
  &::after {
    content: '';
    display: table;
    clear: both;
  }
}



/*
base + typography -> general layout + grid -> page layout -> component

phone
tablet-portrait
tablet-landscape
desktop // already
*/
@mixin respond($breakpoint) {

    @if $breakpoint == tablet-landscape {
        @media (max-width: 1200px) { @content };
    }

    @if $breakpoint == tablet-portrait {
        @media (max-width: 992px) { @content };
    }

    @if $breakpoint == phone {
        @media (max-width: 650px) { @content };
    }

    @if $breakpoint == phone-s {
        @media (max-width: 480px) { @content };
    }


    @if $breakpoint == phone-x-s {
        @media (max-width: 368px) { @content };
    }
}










$themes: (
    light: (
        primaryColor: #8a4baf,
        textColor: black,
        backgroundColor: white,
        secondaryBackgroundColor: white,
    ),
    dark: (
        primaryColor: #b17acc,
        textColor: #cfcfd0,
        backgroundColor: #131217,
        secondaryBackgroundColor: #232129,
    ),
);


@function themed($key) {
    @return map-get($theme-map, $key);
}


@mixin themify($themes: $themes) {
    @each $theme, $map in $themes {

        .theme-#{$theme} & {
            $theme-map: () !global;
            @each $key, $submap in $map {
                $value: map-get(map-get($themes, $theme), '#{$key}');
                $theme-map: map-merge($theme-map, ($key: $value)) !global;
            }

            @content;
            $theme-map: null !global;
            transition: all 0.25s;
        }

    }
}
